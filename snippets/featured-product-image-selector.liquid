<div class="featured-product-photo-container" id="featuredProductPhotoContainer-{{ section.id }}">

  {% for media in product.media %}
    {% case media.media_type %}
      {% when 'image' %}
        {%- capture media_wrapper_id -%}featuredProductPhotoWrapper-{{ section.id }}-{{ media.id }}{%- endcapture -%}
        {%- assign max_width = 700 -%}
        {% comment %}LightBox Modal{% endcomment %}
        <div x-data="{ imgModal : false, imgModalSrc : '', imgModalDesc : '' }">
          <template @img-modal.window="imgModal = true; imgModalSrc = $event.detail.imgModalSrc; imgModalDesc = $event.detail.imgModalDesc;" x-if="imgModal">
            <div x-transition:enter="transition ease-out duration-300" x-transition:enter-start="opacity-0 transform scale-90" x-transition:enter-end="opacity-100 transform scale-100" x-transition:leave="transition ease-in duration-300" x-transition:leave-start="opacity-100 transform scale-100" x-transition:leave-end="opacity-0 transform scale-90" x-on:click.away="imgModalSrc = ''" class="p-2 fixed w-full h-100 inset-0 z-50 overflow-hidden flex justify-center items-center bg-black bg-opacity-75">
              <div @click.away="imgModal = ''" class="flex flex-col max-w-3xl max-h-full overflow-auto" style="background-color:white;">
                <div class="z-50">
                  <button @click="imgModal = ''" class="float-right pt-2 pr-2 outline-none focus:outline-none">
                    <svg class="fill-current text-white " xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18">
                      <path d="M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z">
                      </path>
                    </svg>
                  </button>
                </div>
                <div class="p-2">
                  <img :alt="imgModalSrc" class="object-contain h-1/2-screen" :src="imgModalSrc" width="800" height="800">
                  <p x-text="imgModalDesc" class="text-center text-white"></p>
                </div>
              </div>
            </div>
          </template>
        </div>
      
        <div 
          x-show="selectedId === {{ media.id }}" class="p-8"
          id="{{ media_wrapper_id }}" 
          data-image-id="{{ media.id }}" 
          style="max-width: {{ max_width }}px"
        >
          <div class="no-js featured-product__image-wrapper">
            <div x-data="{}">
              <a @click="$dispatch('img-modal', {  imgModalSrc: '{{ media | image_url: '800x800' }}', imgModalDesc: '{{ media.alt | replace: '"', '' }}' })" style="position: relative; display: block;">
                <img id="featured-{{ media.id }}"
                  loading="lazy"
                  src="{{ media | image_url: '500x500' }}"
                  data-widths="[180, 360, 540, 720, 900, 1080, 1296, 1512, 1728, 2048]"
                  data-aspectratio="{{ media.aspect_ratio }}"
                  data-sizes="auto"
                  alt="{{ media.alt | replace: '"', '' }}"
                  class="featured-product-main-image"
                  data-zoom-image="{{ media | image_url: '1024x1024', scale: 2 }}"
                  width="{{ media.width }}"
                  height="{{ media.height }}"
                  >
              </a>
            </div>
          </div>
        </div>
      {% when 'external_video' %}
        <div 
          x-show="selectedId === {{ media.id }}" class="p-8"
          id="{{ media_wrapper_id }}" 
          data-image-id="{{ media.id }}" 
          style="max-width: {{ max_width }}px"
        > 
         {%- capture media_wrapper_id -%}featuredProductPhotoWrapper-{{ section.id }}-{{ media.id }}{%- endcapture -%} 
         <div id="{{ media_wrapper_id }}" class="featured-product-video-wrapper" data-image-id="{{ media.id }}" style="max-width: {{ max_width }}px">
          <div class="featured-product-video">
            {{ media | external_video_tag }}
          </div>
        </div>
      </div>
    {% endcase %}
  {% endfor %}

  <ul class="featured-product-photo-thumbs grid-uniform" id="featuredProductThumbs-{{ section.id }}">
    {% for media in product.media %}
      {% case media.media_type %}
        {% when 'image' %}
          <li class="grid-item medium-down--one-quarter large--one-fifth">
            <button
              id="featured-thumb-{{ media.id }}"
              @click="selectedId = {{ media.id }}"
              type="button"
              class="inline-flex px-4 py-2 border-t border-l border-r">               
                <img src="{{ media | image_url: '100x100'}}" alt="{{ media.alt | replace: '"', '' }}" width="100" height="100">
            </button>
          </li>
        {% when 'external_video' %}
          <li class="grid-item medium-down--one-quarter large--one-fifth">
            <button
              id="featured-thumb-{{ media.id }}"
              @click="selectedId = {{ media.id }}"
              type="button"
              class="inline-flex px-4 py-2 border-t border-l border-r relative">                    
              <img src="{{ media | image_url: '100x100'}}" alt="{{ media.alt | replace: '"', '' }}" style="position:relative;" width="100" height="100">
              <div class="featured-product-video-overlay">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" d="M15.91 11.672a.375.375 0 0 1 0 .656l-5.603 3.113a.375.375 0 0 1-.557-.328V8.887c0-.286.307-.466.557-.327l5.603 3.112Z"></path>
                </svg>
              </div>
            </button>
          </li>
      {% endcase %}
    {% endfor %}
  </ul>
</div>

<style>
/* Featured Product Specific Styles - Scoped to prevent conflicts */
#featuredProductPhotoContainer-{{ section.id }} .fixed {
  position: fixed;
}
#featuredProductPhotoContainer-{{ section.id }} .inset-0 {
  inset: 0px;
}
#featuredProductPhotoContainer-{{ section.id }} .z-50 {
  z-index: 50;
}
#featuredProductPhotoContainer-{{ section.id }} .float-right {
  float: right;
}
#featuredProductPhotoContainer-{{ section.id }} .flex {
  display: flex;
}
#featuredProductPhotoContainer-{{ section.id }} .max-h-full {
  max-height: 100%;
}
#featuredProductPhotoContainer-{{ section.id }} .w-full {
  width: 100%;
}
#featuredProductPhotoContainer-{{ section.id }} .max-w-3xl {
  max-width: 48rem;
}
#featuredProductPhotoContainer-{{ section.id }} .scale-100 {
  --tw-scale-x: 1;
  --tw-scale-y: 1;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
#featuredProductPhotoContainer-{{ section.id }} .scale-90 {
  --tw-scale-x: .9;
  --tw-scale-y: .9;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
#featuredProductPhotoContainer-{{ section.id }} .transform {
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
}
#featuredProductPhotoContainer-{{ section.id }} .flex-col {
  flex-direction: column;
}
#featuredProductPhotoContainer-{{ section.id }} .items-center {
  align-items: center;
}
#featuredProductPhotoContainer-{{ section.id }} .justify-center {
  justify-content: center;
}
#featuredProductPhotoContainer-{{ section.id }} .overflow-auto {
  overflow: auto;
}
#featuredProductPhotoContainer-{{ section.id }} .overflow-hidden {
  overflow: hidden;
}
#featuredProductPhotoContainer-{{ section.id }} .bg-black {
  --tw-bg-opacity: 1;
  background-color: rgb(0 0 0 / var(--tw-bg-opacity));
}
#featuredProductPhotoContainer-{{ section.id }} .bg-opacity-75 {
  --tw-bg-opacity: 0.75;
}
#featuredProductPhotoContainer-{{ section.id }} .fill-current {
  fill: currentColor;
}
#featuredProductPhotoContainer-{{ section.id }} .object-contain {
  object-fit: contain;
}
#featuredProductPhotoContainer-{{ section.id }} .p-2 {
  padding: 0.5rem;
}
#featuredProductPhotoContainer-{{ section.id }} .pr-2 {
  padding-right: 0.5rem;
}
#featuredProductPhotoContainer-{{ section.id }} .pt-2 {
  padding-top: 0.5rem;
}
#featuredProductPhotoContainer-{{ section.id }} .text-center {
  text-align: center;
}
#featuredProductPhotoContainer-{{ section.id }} .text-white {
  --tw-text-opacity: 1;
  color: rgb(255 255 255 / var(--tw-text-opacity));
}
#featuredProductPhotoContainer-{{ section.id }} .opacity-0 {
  opacity: 0;
}
#featuredProductPhotoContainer-{{ section.id }} .opacity-100 {
  opacity: 1;
}
#featuredProductPhotoContainer-{{ section.id }} .outline-none {
  outline: 2px solid transparent;
  outline-offset: 2px;
}
#featuredProductPhotoContainer-{{ section.id }} .transition {
  transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
#featuredProductPhotoContainer-{{ section.id }} .duration-300 {
  transition-duration: 300ms;
}
#featuredProductPhotoContainer-{{ section.id }} .ease-in {
  transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
}
#featuredProductPhotoContainer-{{ section.id }} .ease-out {
  transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
}
#featuredProductPhotoContainer-{{ section.id }} .focus\:outline-none:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}
#featuredProductPhotoContainer-{{ section.id }} .cursor-pointer {
  cursor:pointer;
}

/* Featured Product Image Zoom Styles - Scoped to prevent conflicts */
#featuredProductPhotoContainer-{{ section.id }} .featured-product-main-image {
  cursor: zoom-in;
}

#featuredProductPhotoContainer-{{ section.id }} .featured-product-zoom-container {
  position: absolute;
  width: 150px;
  height: 150px;
  border: 1px solid #ddd;
  box-shadow: 0 0 5px rgba(0,0,0,0.3);
  overflow: hidden;
  background-repeat: no-repeat;
  background-color: transparent;
  display: none;
  z-index: 10;
  pointer-events: none;
}

/* Featured Product Video Overlay Styles */
#featuredProductPhotoContainer-{{ section.id }} .featured-product-video-overlay {
  position: absolute;
  bottom: 0;
  top: 0;
  background: rgb(0, 0, 0);
  background: rgba(0, 0, 0, 0.5);
  color: #f1f1f1;
  width: 100%;
  height: 100%;
  transition: .5s ease;
  color: white;
  font-size: 20px;
  display: flex;
  text-align: center;
  align-items: center;
  justify-content: center;
}

#featuredProductPhotoContainer-{{ section.id }} .featured-product-video-overlay svg {
  width:50px;
  height:50px;
  background: rgba(256,256,256,.5);
  border-radius: 100%;
}
</style>

<!-- Featured Product Specific Image Zoom Script -->
<script>
// Featured Product Image Zoom Functionality - Scoped to prevent conflicts
(function() {
  'use strict';
  
  function setupFeaturedProductImageZoom(sectionId) {
    const containerSelector = '#featuredProductPhotoContainer-' + sectionId;
    const productImages = document.querySelectorAll(containerSelector + ' .featured-product-main-image');

    productImages.forEach(image => {
      let zoomContainer = null;

      image.addEventListener('mouseenter', (e) => {
        // Create zoom container if it doesn't exist
        if (!zoomContainer) {
          zoomContainer = document.createElement('div');
          zoomContainer.classList.add('featured-product-zoom-container');
          image.parentNode.appendChild(zoomContainer);
        }

        // Set the background image to the high-resolution version
        const zoomImageUrl = image.getAttribute('data-zoom-image');
        zoomContainer.style.backgroundImage = `url('${zoomImageUrl}')`;

        // Display the zoom container
        zoomContainer.style.display = 'block';

        updateFeaturedProductZoomPosition(e, image, zoomContainer);
      });

      image.addEventListener('mousemove', (e) => {
        if (zoomContainer) {
          updateFeaturedProductZoomPosition(e, image, zoomContainer);
        }
      });

      image.addEventListener('mouseleave', () => {
        if (zoomContainer) {
          zoomContainer.style.display = 'none';
        }
      });
    });
  }

  function updateFeaturedProductZoomPosition(e, originalImage, zoomContainer) {
    const originalRect = originalImage.getBoundingClientRect();
    const zoomContainerRect = zoomContainer.getBoundingClientRect();

    // Calculate mouse position relative to the original image
    const mouseX = e.clientX - originalRect.left;
    const mouseY = e.clientY - originalRect.top;

    // Calculate percentage of mouse position across the original image
    const percentX = (mouseX / originalRect.width);
    const percentY = (mouseY / originalRect.height);

    // Define zoom level
    const zoomLevel = 2.5;

    // Calculate the background size based on the zoom level
    const backgroundSizeX = originalImage.naturalWidth * zoomLevel;
    const backgroundSizeY = originalImage.naturalHeight * zoomLevel;

    // Calculate the background position for the zoomed image
    const backgroundPosX = -percentX * (backgroundSizeX - zoomContainerRect.width);
    const backgroundPosY = -percentY * (backgroundSizeY - zoomContainerRect.height);

    zoomContainer.style.backgroundSize = `${backgroundSizeX}px ${backgroundSizeY}px`;
    zoomContainer.style.backgroundPosition = `${backgroundPosX}px ${backgroundPosY}px`;

    // Position the zoom container next to the mouse cursor
    const containerLeft = mouseX + 20;
    const containerTop = mouseY + 20;

    zoomContainer.style.left = `${containerLeft}px`;
    zoomContainer.style.top = `${containerTop}px`;
  }

  // Initialize zoom for this specific featured product section
  document.addEventListener('DOMContentLoaded', () => {
    // Disable zoom on smaller screens or touch devices
    if (window.innerWidth <= 767 || ('ontouchstart' in window) || navigator.maxTouchPoints) {
      return;
    }
    
    // Get the section ID from the current context
    const sectionId = '{{ section.id }}';
    setupFeaturedProductImageZoom(sectionId);
  });
})();
</script>
